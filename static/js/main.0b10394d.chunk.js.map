{"version":3,"sources":["events.ts","comp/Event.tsx","comp/App.tsx","reportWebVitals.ts","index.tsx"],"names":["sortEvents","events","arr","concat","cb","e","datetime","getTime","sort","a","b","compare","convertEventDTO","dto","when","map","w","date","split","s","parseFloat","yyyy","mm","dd","time","timeZone","year","month","day","hour","minute","second","Date","UTC","utcDate","toLocaleString","tzDate","offset","setTime","dateWithTimeZone","title","description","twitch","challonge","fetchEvents","cutoff","fetch","resp","text","YAML","parse","data","dtos","all","flat","upcoming","filter","ret","console","log","EventContainer","styled","div","EventTitle","EventLinks","Event","props","event","links","push","name","url","length","link","index","href","Column","Header","HeaderTitle","Body","BodyTitle","App","useState","undefined","setEvents","getEvents","useCallback","useEffect","ei","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b10394d.chunk.js","sourcesContent":["import YAML from 'yaml';\n\nexport interface EventData {\n  title: string;\n\n  description?: string;\n  twitch?: string;\n  challonge?: string;\n\n  datetime: Date;\n}\n\nexport interface AllEvents {\n  upcoming: EventData[];\n  all: EventData[];\n}\n\ninterface EventWhenDTO {\n  date: string;\n  time: string;\n}\ninterface EventDTO {\n  title: string;\n\n  description?: string;\n  twitch?: string;\n  challonge?: string;\n\n  when: EventWhenDTO[];\n}\n\nfunction compare(a: string | number, b: string | number) {\n  if (a < b) { return -1; }\n  if (a > b) { return 1; }\n  return 0;\n}\nfunction sortArrayOfObjects<T>(arr: T[], cb: ((obj: T) => string | number)): T[] {\n  arr.sort((a, b) => compare(cb(a), cb(b)));\n  return arr;\n}\nfunction sortEvents(events: EventData[]): EventData[] {\n  return sortArrayOfObjects(events.concat(), e => e.datetime.getTime());\n}\n\n// https://stackoverflow.com/a/57842203\nfunction dateWithTimeZone(timeZone: string, year: number, month: number, day: number, hour: number, minute: number, second: number) {\n  const date = new Date(Date.UTC(year, month - 1, day, hour, minute, second));\n  const utcDate = new Date(date.toLocaleString('en-US', { timeZone: \"UTC\" }));\n  const tzDate = new Date(date.toLocaleString('en-US', { timeZone: timeZone }));\n  const offset = utcDate.getTime() - tzDate.getTime();\n  date.setTime(date.getTime() + offset);\n  return date;\n};\nfunction convertEventDTO(dto: EventDTO): EventData[] {\n  return dto.when.map(w => {\n    const [yyyy, mm, dd] = w.date.split('/').map(s => parseFloat(s));\n    const [hour, min] = w.time.split(':').map(s => parseFloat(s));\n    const date = dateWithTimeZone('America/New_York', yyyy, mm, dd, hour, min, 0);\n    return {\n      title: dto.title,\n      description: dto.description,\n      twitch: dto.twitch,\n      challonge: dto.challonge,\n      datetime: date,\n    };\n  });\n}\n\nexport async function fetchEvents(): Promise<AllEvents> {\n  const buffer = 6 * 60 * 60 * 1000; /// 6 hours\n  const cutoff = new Date(new Date().getTime() - buffer);\n\n  const resp = await fetch('events.yaml');\n  const text = await resp.text();\n  const data = await YAML.parse(text);\n\n  const dtos = data.events as EventDTO[];\n  const all = sortEvents(dtos.map(convertEventDTO).flat());\n  const upcoming = all.filter(e => e.datetime > cutoff);\n  const ret: AllEvents = {\n    upcoming,\n    all,\n  };\n\n  console.log(ret);\n  return ret;\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { EventData } from '../events';\n\nconst EventContainer = styled.div`\n  margin: 1rem 0;\n  padding: 0.5rem 1rem;\n  border-radius: 1rem;\n  border: 1px solid black;\n\n  text-align: left;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: stretch;\n\n  & > * {\n    margin: 0.5rem 0;\n  }\n`;\n\nconst EventTitle = styled.div`\n  font-size: 1.5em;\n  text-decoration: underline;\n`;\n\nconst EventLinks = styled.div`\n`;\n\ninterface Link {\n  name: string;\n  url: string;\n}\n\nexport function Event(props: { event: EventData }) {\n  const { event } = props;\n  const links: Link[] = [];\n  if (event.challonge) {\n    links.push({\n      name: 'challonge',\n      url: 'https://challonge.com/' + event.challonge,\n    });\n  }\n  if (event.twitch) {\n    links.push({\n      name: 'twitch',\n      url: 'https://twitch.tv/' + event.twitch,\n    });\n  }\n  return (\n    <EventContainer>\n      <EventTitle>\n        {event.title}\n      </EventTitle>\n      {event.description && (\n        <div>\n          {event.description}\n        </div>\n      )}\n      When: {event.datetime.toLocaleString()}\n      {links.length && (\n        <EventLinks>\n          {links.map((link, index) => (\n            <span>\n              {index > 0 && ' / '}\n              <a key={index} href={link.url}>{link.name}</a>\n            </span>\n          ))}\n        </EventLinks>\n      )}\n    </EventContainer>\n  );\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { fetchEvents, EventData } from '../events';\nimport { Event } from './Event';\n\nconst Column = styled.div`\n  max-width: 600px;\n  min-height: 100vh;\n  margin: 0 auto;\n  padding: 1em;\n  box-sizing: border-box;\n  background-color: white;\n\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: stretch;\n`;\n\nconst Header = styled.div`\n  margin: 1em;\n`;\nconst HeaderTitle = styled.div`\n  font-size: 3em;\n  margin-bottom: 0.2em;\n`;\n\nconst Body = styled.div`\n`;\nconst BodyTitle = styled.div`\n  font-size: 2em;\n  margin-bottom: 0.2em;\n`;\n\nexport function App() {\n  const [events, setEvents] = useState(undefined as EventData[] | undefined);\n\n  const getEvents = useCallback(async () => {\n    const { upcoming } = await fetchEvents();\n    setEvents(upcoming);\n  }, []);\n\n  useEffect(() => {\n    getEvents();\n  }, [getEvents]);\n\n  return (\n    <Column>\n      <Header>\n        <HeaderTitle>Tough Love Arena Events</HeaderTitle>\n        <div>\n          Want to submit your own event? Check the <a href=\"https://github.com/toughlovearena/events\">GitHub</a> for instructions\n        </div>\n      </Header>\n      <Body>\n        <BodyTitle>\n          Upcoming Events\n        </BodyTitle>\n        {events ? (\n          <div>\n            {events.map((e, ei) => (\n              <Event key={ei} event={e} />\n            ))}\n          </div>\n        ) : (\n          <div>\n            loading...\n          </div>\n        )}\n      </Body>\n    </Column>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './comp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}