{"version":3,"sources":["events.ts","comp/Event.tsx","comp/App.tsx","reportWebVitals.ts","index.tsx"],"names":["EventType","EventColor","Stream","Tournament","Meetup","sortEvents","events","arr","concat","cb","e","start","getTime","sort","a","b","compare","convertEventDTO","dto","when","map","w","date","split","s","parseFloat","yyyy","mm","dd","time","timeZone","year","month","day","hour","minute","second","Date","UTC","utcDate","toLocaleString","tzDate","offset","setTime","dateWithTimeZone","end","hours","title","type","description","twitch","challonge","fetchEvents","fetch","resp","text","YAML","parse","data","dtos","all","flat","now","upcoming","filter","ret","console","log","EventContainer","styled","div","props","getEventColor","EventTitle","EventLinks","EventStart","Event","event","links","calEventDescription","url","push","name","calEvent","length","link","index","href","rel","target","calendarLink","Column","Header","HeaderTitle","Body","BodyTitle","App","useState","undefined","setEvents","getEvents","useCallback","useEffect","ei","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.830c4e3e.chunk.js","sourcesContent":["import YAML from 'yaml';\n\n\nexport enum EventType {\n  Stream = 'stream',\n  Tournament = 'tournament',\n  Meetup = 'meetup',\n};\nconst EventColor = {\n  [EventType.Stream]: '#6441a5', // Twitch Purple\n  [EventType.Tournament]: '#aa6c39',\n  [EventType.Meetup]: '#ed1c40',\n};\nexport function getEventColor(type: EventType) {\n  return EventColor[type] ?? 'black';\n}\n\nexport interface EventData {\n  title: string;\n  type: EventType;\n\n  description?: string;\n  twitch?: string;\n  challonge?: string;\n\n  start: Date;\n  end: Date;\n}\n\nexport interface AllEvents {\n  upcoming: EventData[];\n  all: EventData[];\n}\n\ninterface EventWhenDTO {\n  date: string;\n  time: string;\n  hours: number;\n}\ninterface EventDTO {\n  title: string;\n  type: EventType;\n\n  description?: string;\n  twitch?: string;\n  challonge?: string;\n\n  when: EventWhenDTO[];\n}\n\nfunction compare(a: string | number, b: string | number) {\n  if (a < b) { return -1; }\n  if (a > b) { return 1; }\n  return 0;\n}\nfunction sortArrayOfObjects<T>(arr: T[], cb: ((obj: T) => string | number)): T[] {\n  arr.sort((a, b) => compare(cb(a), cb(b)));\n  return arr;\n}\nfunction sortEvents(events: EventData[]): EventData[] {\n  return sortArrayOfObjects(events.concat(), e => e.start.getTime());\n}\n\n// https://stackoverflow.com/a/57842203\nfunction dateWithTimeZone(timeZone: string, year: number, month: number, day: number, hour: number, minute: number, second: number) {\n  const date = new Date(Date.UTC(year, month - 1, day, hour, minute, second));\n  const utcDate = new Date(date.toLocaleString('en-US', { timeZone: \"UTC\" }));\n  const tzDate = new Date(date.toLocaleString('en-US', { timeZone: timeZone }));\n  const offset = utcDate.getTime() - tzDate.getTime();\n  date.setTime(date.getTime() + offset);\n  return date;\n};\nfunction convertEventDTO(dto: EventDTO): EventData[] {\n  return dto.when.map(w => {\n    const [yyyy, mm, dd] = w.date.split('/').map(s => parseFloat(s));\n    const [hour, min] = w.time.split(':').map(s => parseFloat(s));\n    const start = dateWithTimeZone('America/New_York', yyyy, mm, dd, hour, min, 0);\n    const end = new Date(start.getTime() + (w.hours * 60 * 60 * 1000));\n    return {\n      title: dto.title,\n      type: dto.type,\n      description: dto.description,\n      twitch: dto.twitch,\n      challonge: dto.challonge,\n      start,\n      end,\n    };\n  });\n}\n\nexport async function fetchEvents(): Promise<AllEvents> {\n\n  const resp = await fetch('events.yaml');\n  const text = await resp.text();\n  const data = await YAML.parse(text);\n\n  const dtos = data.events as EventDTO[];\n  const all = sortEvents(dtos.map(convertEventDTO).flat());\n\n  const now = new Date();\n  const upcoming = all.filter(e => e.end > now);\n\n  const ret: AllEvents = {\n    upcoming,\n    all,\n  };\n  console.log(ret);\n  return ret;\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport * as calendarLink from \"calendar-link\";\nimport { EventData, EventType, getEventColor } from '../events';\n\nconst EventContainer = styled.div<{ type: EventType }>`\n  margin: 1rem 0;\n  padding: 0.5rem 1rem;\n  border-radius: 1rem;\n  ${props => `\n    border: 0.5em solid ${getEventColor(props.type)};\n  `}\n\n  text-align: left;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: stretch;\n\n  & > * {\n    margin: 0.5rem 0;\n  }\n`;\n\nconst EventTitle = styled.div`\n  font-size: 1.5em;\n  text-decoration: underline;\n`;\n\nconst EventLinks = styled.div`\n`;\n\nconst EventStart = styled.div`\n  font-size: 1.3em;\n`;\n\ninterface Link {\n  name: string;\n  url: string;\n}\n\nexport function Event(props: { event: EventData }) {\n  const { event } = props;\n\n  const links: Link[] = [];\n  let calEventDescription = event.description ? event.description + '\\n\\n' : '';\n  if (event.challonge) {\n    const url = 'https://challonge.com/' + event.challonge;\n    links.push({\n      name: 'challonge',\n      url,\n    });\n    calEventDescription += `challonge: ${url} \\n`;\n  }\n  if (event.twitch) {\n    const url = 'https://twitch.tv/' + event.twitch;\n    links.push({\n      name: 'twitch',\n      url,\n    });\n    calEventDescription += `twitch: ${url} \\n`;\n  }\n\n  const calEvent: calendarLink.CalendarEvent = {\n    title: event.title,\n    description: calEventDescription,\n    start: event.start,\n    end: event.end,\n  };\n  return (\n    <EventContainer type={event.type}>\n      <EventTitle>\n        {event.title}\n      </EventTitle>\n      {event.description && (\n        <div>\n          {event.description}\n        </div>\n      )}\n      {links.length && (\n        <EventLinks>\n          links:&nbsp;\n          {links.map((link, index) => (\n            <span key={index} >\n              {index > 0 && ' / '}\n              <a href={link.url}>{link.name}</a>\n            </span>\n          ))}\n        </EventLinks>\n      )}\n      <div>\n        <EventStart>\n          {event.start.toLocaleString()}\n        </EventStart>\n        <div>\n          add to:&nbsp;\n          <a rel=\"noreferrer\" target=\"_blank\" href={calendarLink.google(calEvent)}>gcal</a>\n          &nbsp;/&nbsp;\n          <a rel=\"noreferrer\" target=\"_blank\" href={calendarLink.ics(calEvent)}>ics</a>\n          &nbsp;/&nbsp;\n          <a rel=\"noreferrer\" target=\"_blank\" href={calendarLink.outlook(calEvent)}>outlook</a>\n        </div>\n      </div>\n    </EventContainer>\n  );\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { fetchEvents, EventData } from '../events';\nimport { Event } from './Event';\n\nconst Column = styled.div`\n  max-width: 600px;\n  min-height: 100vh;\n  margin: 0 auto;\n  padding: 1em;\n  border: 1px solid black;\n  border-top-width: 0;\n  border-bottom-width: 0;\n  box-sizing: border-box;\n  background-color: white;\n\n\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: stretch;\n`;\n\nconst Header = styled.div`\n  margin: 1em;\n`;\nconst HeaderTitle = styled.div`\n  font-size: 3em;\n  margin-bottom: 0.2em;\n`;\n\nconst Body = styled.div`\n`;\nconst BodyTitle = styled.div`\n  font-size: 2em;\n  margin-bottom: 0.2em;\n`;\n\nexport function App() {\n  const [events, setEvents] = useState(undefined as EventData[] | undefined);\n\n  const getEvents = useCallback(async () => {\n    const { upcoming } = await fetchEvents();\n    setEvents(upcoming);\n  }, []);\n\n  useEffect(() => {\n    getEvents();\n  }, [getEvents]);\n\n  return (\n    <Column>\n      <Header>\n        <HeaderTitle>Tough Love Arena Events</HeaderTitle>\n        <div>\n          Want to submit your own event? Check the <a href=\"https://github.com/toughlovearena/events\">GitHub</a> for instructions\n        </div>\n      </Header>\n      <Body>\n        <BodyTitle>\n          Upcoming Events\n        </BodyTitle>\n        {events ? (\n          <div>\n            {events.map((e, ei) => (\n              <Event key={ei} event={e} />\n            ))}\n          </div>\n        ) : (\n          <div>\n            loading...\n          </div>\n        )}\n      </Body>\n    </Column>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './comp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}