{"version":3,"sources":["events.ts","comp/Event.tsx","comp/App.tsx","reportWebVitals.ts","index.tsx"],"names":["EventType","EventColor","Stream","Tournament","Meetup","getEventColor","type","convertEventDTO","dto","when","map","w","date","split","s","parseFloat","yyyy","mm","dd","time","start","timeZone","year","month","day","hour","minute","second","Date","UTC","utcDate","toLocaleString","tzDate","offset","getTime","setTime","dateWithTimeZone","end","hours","title","description","image","twitch","challonge","parseEvents","eventYaml","now","dtos","YAML","parse","events","Error","all","arr","concat","cb","e","sort","a","b","compare","sortEvents","out","forEach","subArr","push","flatten","upcoming","filter","fetchEvents","fetch","resp","text","EventContainer","styled","div","props","EventTitle","EventImage","img","EventDescription","EventLinks","EventTime","EventStart","Event","event","links","calEventDescription","url","name","calEvent","length","link","index","rel","target","href","calendarLink","src","Column","Header","HeaderLogo","HeaderTitle","Body","EventKey","EventLabel","color","selected","FilterLabel","setFilter","eventType","label","onClick","App","useState","undefined","setEvents","getEvents","useCallback","filtered","useEffect","ei","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.108b3eed.chunk.js","sourcesContent":["import YAML from 'yaml';\n\n\nexport enum EventType {\n  Stream = 'stream',\n  Tournament = 'tournament',\n  Meetup = 'meetup',\n};\nconst EventColor = {\n  [EventType.Stream]: '#9747ff',\n  [EventType.Tournament]: '#ff870f',\n  [EventType.Meetup]: '#ed1c40',\n};\nexport function getEventColor(type: EventType | undefined) {\n  return (type && EventColor[type]) ?? '#707070';\n}\n\nexport interface EventData {\n  title: string;\n  description: string;\n  type: EventType;\n\n  image?: string;\n  twitch?: string;\n  challonge?: string;\n\n  start: Date;\n  end: Date;\n}\n\nexport interface AllEvents {\n  upcoming: EventData[];\n  all: EventData[];\n}\n\ninterface EventWhenDTO {\n  date: string;\n  time: string;\n  hours: number;\n}\ninterface EventDTO {\n  title: string;\n  description: string;\n  type: EventType;\n\n  image?: string;\n  twitch?: string;\n  challonge?: string;\n\n  when: EventWhenDTO[];\n}\ninterface YamlDTO {\n  events: EventDTO[];\n}\n\nfunction compare(a: string | number, b: string | number) {\n  if (a < b) { return -1; }\n  if (a > b) { return 1; }\n  return 0;\n}\nfunction sortArrayOfObjects<T>(arr: T[], cb: ((obj: T) => string | number)): T[] {\n  arr.sort((a, b) => compare(cb(a), cb(b)));\n  return arr;\n}\nfunction sortEvents(events: EventData[]): EventData[] {\n  return sortArrayOfObjects(events.concat(), e => e.start.getTime());\n}\n\n// https://stackoverflow.com/a/57842203\nfunction dateWithTimeZone(timeZone: string, year: number, month: number, day: number, hour: number, minute: number, second: number) {\n  const date = new Date(Date.UTC(year, month - 1, day, hour, minute, second));\n  const utcDate = new Date(date.toLocaleString('en-US', { timeZone: \"UTC\" }));\n  const tzDate = new Date(date.toLocaleString('en-US', { timeZone: timeZone }));\n  const offset = utcDate.getTime() - tzDate.getTime();\n  date.setTime(date.getTime() + offset);\n  return date;\n};\nfunction convertEventDTO(dto: EventDTO): EventData[] {\n  return dto.when.map(w => {\n    const [yyyy, mm, dd] = w.date.split('/').map(s => parseFloat(s));\n    const [hour, min] = w.time.split(':').map(s => parseFloat(s));\n    const start = dateWithTimeZone('America/New_York', yyyy, mm, dd, hour, min, 0);\n    const end = new Date(start.getTime() + (w.hours * 60 * 60 * 1000));\n    return {\n      title: dto.title,\n      type: dto.type,\n      description: dto.description,\n\n      image: dto.image,\n      twitch: dto.twitch,\n      challonge: dto.challonge,\n\n      start,\n      end,\n    };\n  });\n}\n\nfunction flatten<T>(arr: T[][]): T[] {\n  // dumb polyfill for jest\n  // https://github.com/kulshekhar/ts-jest/issues/828\n  const out = [] as T[];\n  arr.forEach(subArr => out.push(...subArr));\n  return out;\n}\n\nexport function parseEvents(eventYaml: string) {\n  const now = new Date();\n  const data = YAML.parse(eventYaml) as YamlDTO;\n  const dtos = data.events;\n  if (!dtos) {\n    throw new Error('events yaml is not formatted correctly');\n  }\n  const all = sortEvents(flatten(dtos.map(convertEventDTO)));\n\n  const upcoming = all.filter(e => e.end > now);\n  const ret: AllEvents = {\n    upcoming,\n    all,\n  };\n  return ret;\n}\n\nexport async function fetchEvents(): Promise<AllEvents> {\n  const now = new Date();\n  const resp = await fetch(`events.yaml?v=${now.getTime()}`);\n  const text = await resp.text();\n  return parseEvents(text);\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport * as calendarLink from \"calendar-link\";\nimport { EventData, EventType, getEventColor } from '../events';\n\nconst EventContainer = styled.div<{ type: EventType }>`\n  margin: 1rem 0;\n  padding: 0.5rem 1rem;\n  border-radius: 1rem 0 1rem 1rem;\n  ${props => `\n    border: 0.5em solid ${getEventColor(props.type)};\n  `}\n\n  /* image */\n  position: relative;\n  background: none;\n  z-index: 2;\n\n  text-align: left;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: stretch;\n`;\n\nconst EventTitle = styled.div`\n  font-size: 1.5em;\n  text-decoration: underline;\n  margin: 0.5rem 0;\n`;\n\nconst EventImage = styled.img`\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: auto;\n  height: 3.5rem;\n  z-index: 1;\n`;\n\nconst EventDescription = styled.div`\n`;\n\nconst EventLinks = styled.div`\n`;\n\nconst EventTime = styled.div`\n  text-align: right;\n`;\nconst EventStart = styled.div`\n  font-size: 1.3em;\n`;\n\ninterface Link {\n  name: string;\n  url: string;\n}\n\nexport function Event(props: { event: EventData }) {\n  const { event } = props;\n\n  const links: Link[] = [];\n  let calEventDescription = event.description ? event.description + '\\n\\n' : '';\n  if (event.challonge) {\n    const url = 'https://challonge.com/' + event.challonge;\n    links.push({\n      name: 'challonge',\n      url,\n    });\n    calEventDescription += `${url}\\n`;\n  }\n  if (event.twitch) {\n    const url = 'https://twitch.tv/' + event.twitch;\n    links.push({\n      name: 'twitch',\n      url,\n    });\n    calEventDescription += `${url}\\n`;\n  }\n\n  const calEvent: calendarLink.CalendarEvent = {\n    title: event.title,\n    description: calEventDescription,\n    start: event.start,\n    end: event.end,\n  };\n  return (\n    <EventContainer type={event.type}>\n      <EventTitle>\n        {event.title}\n      </EventTitle>\n      <EventDescription>\n        {event.description}\n      </EventDescription>\n      {links.length && (\n        <EventLinks>\n          {links.map((link, index) => (\n            <span key={index} >\n              {index > 0 && ' / '}\n              <a rel=\"noreferrer\" target=\"_blank\" href={link.url}>{link.name}</a>\n            </span>\n          ))}\n        </EventLinks>\n      )}\n      <EventTime>\n        <EventStart>\n          {event.start.toLocaleString()}\n        </EventStart>\n        <div>\n          <a rel=\"noreferrer\" target=\"_blank\" href={calendarLink.google(calEvent)}>gcal</a>\n          &nbsp;/&nbsp;\n          <a rel=\"noreferrer\" target=\"_blank\" href={calendarLink.ics(calEvent)}>ics</a>\n          &nbsp;/&nbsp;\n          <a rel=\"noreferrer\" target=\"_blank\" href={calendarLink.outlook(calEvent)}>outlook</a>\n        </div>\n      </EventTime>\n      {event.image && (\n        <EventImage src={'images/' + event.image} />\n      )}\n    </EventContainer>\n  );\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { fetchEvents, EventData, EventType, getEventColor } from '../events';\nimport { Event } from './Event';\n\nconst Column = styled.div`\n  max-width: 620px;\n  min-height: 100vh;\n  margin: 0 auto;\n  padding: 1em 2em;\n  border: 1px solid black;\n  border-top-width: 0;\n  border-bottom-width: 0;\n  box-sizing: border-box;\n  background-color: white;\n\n\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: stretch;\n`;\n\nconst Header = styled.div`\n  margin: 1em;\n`;\nconst HeaderLogo = styled.img`\n  width: 95%;\n  height: auto;\n`;\nconst HeaderTitle = styled.div`\n  font-size: 1.5em;\n  margin-bottom: 0.2em;\n`;\n\nconst Body = styled.div`\n`;\nconst BodyTitle = styled.div`\n  font-size: 2em;\n  margin-bottom: 0.2em;\n`;\n\nconst EventKey = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n`;\nconst EventLabel = styled.div<{ color: string, selected: boolean, }>`\n  cursor: pointer;\n  margin: 0.3em;\n  padding: 0.5em;\n  box-sizing: border-box;\n  width: 7em;\n  border-radius: 1em;\n  ${props => `\n    border: 0.2em solid ${props.color};\n    ${props.selected ? `\n      border-width: 0.4em;\n    ` : ``}\n  `}\n\n`;\n\nfunction FilterLabel(props: {\n  filter: EventType | undefined,\n  setFilter(eventType: EventType | undefined): void;\n  eventType: EventType | undefined,\n  label: string,\n}) {\n  const {\n    filter,\n    setFilter,\n    eventType,\n    label,\n  } = props;\n  return (\n    <EventLabel\n      selected={filter === eventType}\n      color={getEventColor(eventType)}\n      onClick={() => setFilter(eventType)}\n    >{label}</EventLabel>\n  )\n}\n\nexport function App() {\n  const [filter, setFilter] = useState(undefined as EventType | undefined);\n  const [events, setEvents] = useState(undefined as EventData[] | undefined);\n\n  const getEvents = useCallback(async () => {\n    const { upcoming } = await fetchEvents();\n    const filtered = filter ? upcoming.filter(e => e.type === filter) : upcoming;\n    setEvents(filtered);\n  }, [filter]);\n\n  useEffect(() => {\n    getEvents();\n  }, [getEvents]);\n\n  return (\n    <Column>\n      <Header>\n        <HeaderLogo src='logo.png' />\n        <HeaderTitle>Upcoming Tough Love Arena Events</HeaderTitle>\n        <div>\n          All dates and times are displayed in your local timezone.\n        </div>\n        <div>\n          Want to submit your own event? Check the <a href=\"https://github.com/toughlovearena/events.toughlovearena.com\">GitHub</a> for instructions.\n        </div>\n      </Header>\n      <Body>\n        <EventKey>\n          <FilterLabel filter={filter} setFilter={setFilter} eventType={undefined} label='All'></FilterLabel>\n          <FilterLabel filter={filter} setFilter={setFilter} eventType={EventType.Tournament} label='Tournament'></FilterLabel>\n          <FilterLabel filter={filter} setFilter={setFilter} eventType={EventType.Stream} label='Stream'></FilterLabel>\n          {/* <FilterLabel filter={filter} setFilter={setFilter} eventType={EventType.Meetup} label='Meetup'></FilterLabel> */}\n        </EventKey>\n        {events ? (\n          <div>\n            {events.map((e, ei) => (\n              <Event key={ei} event={e} />\n            ))}\n          </div>\n        ) : (\n          <div>\n            loading...\n          </div>\n        )}\n      </Body>\n    </Column>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './comp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}