{"version":3,"sources":["events.ts","comp/Event.tsx","comp/App.tsx","reportWebVitals.ts","index.tsx"],"names":["EventType","EventColor","Stream","Tournament","Meetup","getEventColor","type","sortEvents","events","arr","concat","cb","e","start","getTime","sort","a","b","compare","convertEventDTO","dto","when","map","w","date","split","s","parseFloat","yyyy","mm","dd","time","timeZone","year","month","day","hour","minute","second","Date","UTC","utcDate","toLocaleString","tzDate","offset","setTime","dateWithTimeZone","end","hours","title","description","image","twitch","challonge","fetchEvents","fetch","resp","text","YAML","parse","data","dtos","all","flat","now","upcoming","filter","ret","console","log","EventContainer","styled","div","props","EventTitle","EventImage","img","EventDescription","EventLinks","EventTime","EventStart","Event","event","links","calEventDescription","url","push","name","calEvent","length","link","index","rel","target","href","calendarLink","src","Column","Header","HeaderLogo","HeaderTitle","Body","EventKey","EventLabel","color","selected","FilterLabel","setFilter","eventType","label","onClick","App","useState","undefined","setEvents","getEvents","useCallback","filtered","useEffect","ei","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5edc8311.chunk.js","sourcesContent":["import YAML from 'yaml';\n\n\nexport enum EventType {\n  Stream = 'stream',\n  Tournament = 'tournament',\n  Meetup = 'meetup',\n};\nconst EventColor = {\n  [EventType.Stream]: '#6441a5', // Twitch Purple\n  [EventType.Tournament]: '#aa6c39',\n  [EventType.Meetup]: '#ed1c40',\n};\nexport function getEventColor(type: EventType) {\n  return EventColor[type] ?? 'black';\n}\n\nexport interface EventData {\n  title: string;\n  description: string;\n  type: EventType;\n\n  image?: string;\n  twitch?: string;\n  challonge?: string;\n\n  start: Date;\n  end: Date;\n}\n\nexport interface AllEvents {\n  upcoming: EventData[];\n  all: EventData[];\n}\n\ninterface EventWhenDTO {\n  date: string;\n  time: string;\n  hours: number;\n}\ninterface EventDTO {\n  title: string;\n  description: string;\n  type: EventType;\n\n  image?: string;\n  twitch?: string;\n  challonge?: string;\n\n  when: EventWhenDTO[];\n}\n\nfunction compare(a: string | number, b: string | number) {\n  if (a < b) { return -1; }\n  if (a > b) { return 1; }\n  return 0;\n}\nfunction sortArrayOfObjects<T>(arr: T[], cb: ((obj: T) => string | number)): T[] {\n  arr.sort((a, b) => compare(cb(a), cb(b)));\n  return arr;\n}\nfunction sortEvents(events: EventData[]): EventData[] {\n  return sortArrayOfObjects(events.concat(), e => e.start.getTime());\n}\n\n// https://stackoverflow.com/a/57842203\nfunction dateWithTimeZone(timeZone: string, year: number, month: number, day: number, hour: number, minute: number, second: number) {\n  const date = new Date(Date.UTC(year, month - 1, day, hour, minute, second));\n  const utcDate = new Date(date.toLocaleString('en-US', { timeZone: \"UTC\" }));\n  const tzDate = new Date(date.toLocaleString('en-US', { timeZone: timeZone }));\n  const offset = utcDate.getTime() - tzDate.getTime();\n  date.setTime(date.getTime() + offset);\n  return date;\n};\nfunction convertEventDTO(dto: EventDTO): EventData[] {\n  return dto.when.map(w => {\n    const [yyyy, mm, dd] = w.date.split('/').map(s => parseFloat(s));\n    const [hour, min] = w.time.split(':').map(s => parseFloat(s));\n    const start = dateWithTimeZone('America/New_York', yyyy, mm, dd, hour, min, 0);\n    const end = new Date(start.getTime() + (w.hours * 60 * 60 * 1000));\n    return {\n      title: dto.title,\n      type: dto.type,\n      description: dto.description,\n\n      image: dto.image,\n      twitch: dto.twitch,\n      challonge: dto.challonge,\n\n      start,\n      end,\n    };\n  });\n}\n\nexport async function fetchEvents(): Promise<AllEvents> {\n\n  const resp = await fetch('events.yaml');\n  const text = await resp.text();\n  const data = await YAML.parse(text);\n\n  const dtos = data.events as EventDTO[];\n  const all = sortEvents(dtos.map(convertEventDTO).flat());\n\n  const now = new Date();\n  const upcoming = all.filter(e => e.end > now);\n\n  const ret: AllEvents = {\n    upcoming,\n    all,\n  };\n  console.log(ret);\n  return ret;\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport * as calendarLink from \"calendar-link\";\nimport { EventData, EventType, getEventColor } from '../events';\n\nconst EventContainer = styled.div<{ type: EventType }>`\n  margin: 1rem 0;\n  padding: 0.5rem 1rem;\n  border-radius: 1rem 0 1rem 1rem;\n  ${props => `\n    border: 0.5em solid ${getEventColor(props.type)};\n  `}\n\n  /* image */\n  position: relative;\n  background: none;\n  z-index: 2;\n\n  text-align: left;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: stretch;\n`;\n\nconst EventTitle = styled.div`\n  font-size: 1.5em;\n  text-decoration: underline;\n  margin: 0.5rem 0;\n`;\n\nconst EventImage = styled.img`\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: auto;\n  height: 3.5rem;\n  z-index: 1;\n`;\n\nconst EventDescription = styled.div`\n`;\n\nconst EventLinks = styled.div`\n`;\n\nconst EventTime = styled.div`\n  text-align: right;\n`;\nconst EventStart = styled.div`\n  font-size: 1.3em;\n`;\n\ninterface Link {\n  name: string;\n  url: string;\n}\n\nexport function Event(props: { event: EventData }) {\n  const { event } = props;\n\n  const links: Link[] = [];\n  let calEventDescription = event.description ? event.description + '\\n\\n' : '';\n  if (event.challonge) {\n    const url = 'https://challonge.com/' + event.challonge;\n    links.push({\n      name: 'challonge',\n      url,\n    });\n    calEventDescription += `challonge: ${url} \\n`;\n  }\n  if (event.twitch) {\n    const url = 'https://twitch.tv/' + event.twitch;\n    links.push({\n      name: 'twitch',\n      url,\n    });\n    calEventDescription += `twitch: ${url} \\n`;\n  }\n\n  const calEvent: calendarLink.CalendarEvent = {\n    title: event.title,\n    description: calEventDescription,\n    start: event.start,\n    end: event.end,\n  };\n  return (\n    <EventContainer type={event.type}>\n      <EventTitle>\n        {event.title}\n      </EventTitle>\n      <EventDescription>\n        {event.description}\n      </EventDescription>\n      {links.length && (\n        <EventLinks>\n          {links.map((link, index) => (\n            <span key={index} >\n              {index > 0 && ' / '}\n              <a rel=\"noreferrer\" target=\"_blank\" href={link.url}>{link.name}</a>\n            </span>\n          ))}\n        </EventLinks>\n      )}\n      <EventTime>\n        <EventStart>\n          {event.start.toLocaleString()}\n        </EventStart>\n        <div>\n          <a rel=\"noreferrer\" target=\"_blank\" href={calendarLink.google(calEvent)}>gcal</a>\n          &nbsp;/&nbsp;\n          <a rel=\"noreferrer\" target=\"_blank\" href={calendarLink.ics(calEvent)}>ics</a>\n          &nbsp;/&nbsp;\n          <a rel=\"noreferrer\" target=\"_blank\" href={calendarLink.outlook(calEvent)}>outlook</a>\n        </div>\n      </EventTime>\n      {event.image && (\n        <EventImage src={'images/' + event.image} />\n      )}\n    </EventContainer>\n  );\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { fetchEvents, EventData, EventType, getEventColor } from '../events';\nimport { Event } from './Event';\n\nconst Column = styled.div`\n  max-width: 600px;\n  min-height: 100vh;\n  margin: 0 auto;\n  padding: 1em;\n  border: 1px solid black;\n  border-top-width: 0;\n  border-bottom-width: 0;\n  box-sizing: border-box;\n  background-color: white;\n\n\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: stretch;\n`;\n\nconst Header = styled.div`\n  margin: 1em;\n`;\nconst HeaderLogo = styled.img`\n  width: 95%;\n  height: auto;\n`;\nconst HeaderTitle = styled.div`\n  font-size: 1.5em;\n  margin-bottom: 0.2em;\n`;\n\nconst Body = styled.div`\n`;\nconst BodyTitle = styled.div`\n  font-size: 2em;\n  margin-bottom: 0.2em;\n`;\n\nconst EventKey = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n`;\nconst EventLabel = styled.div<{ color: string, selected: boolean, }>`\n  cursor: pointer;\n  margin: 0.3em;\n  padding: 0.5em;\n  box-sizing: border-box;\n  width: 7em;\n  ${props => `\n    border: 0.5em solid ${props.color};\n    border-radius: ${props.selected ? '0' : '1'}em;\n    ${props.selected ? `\n      background-color: #ffa;\n    ` : ``}\n  `}\n\n`;\n\nfunction FilterLabel(props: {\n  filter: EventType | undefined,\n  setFilter(eventType: EventType | undefined): void;\n  eventType: EventType | undefined,\n  label: string,\n}) {\n  const {\n    filter,\n    setFilter,\n    eventType,\n    label,\n  } = props;\n  return (\n    <EventLabel\n      selected={filter === eventType}\n      color={eventType ? getEventColor(eventType) : 'black'}\n      onClick={() => setFilter(eventType)}\n    >{label}</EventLabel>\n  )\n}\n\nexport function App() {\n  const [filter, setFilter] = useState(undefined as EventType | undefined);\n  const [events, setEvents] = useState(undefined as EventData[] | undefined);\n\n  const getEvents = useCallback(async () => {\n    const { upcoming } = await fetchEvents();\n    const filtered = filter ? upcoming.filter(e => e.type === filter) : upcoming;\n    setEvents(filtered);\n  }, [filter]);\n\n  useEffect(() => {\n    getEvents();\n  }, [getEvents]);\n\n  return (\n    <Column>\n      <Header>\n        <HeaderLogo src='logo.png' />\n        <HeaderTitle>Upcoming Tough Love Arena Events</HeaderTitle>\n        <div>\n          Want to submit your own event? Check the <a href=\"https://github.com/toughlovearena/events\">GitHub</a> for instructions\n        </div>\n      </Header>\n      <Body>\n        <EventKey>\n          <FilterLabel filter={filter} setFilter={setFilter} eventType={undefined} label='All'></FilterLabel>\n          <FilterLabel filter={filter} setFilter={setFilter} eventType={EventType.Tournament} label='Tournament'></FilterLabel>\n          <FilterLabel filter={filter} setFilter={setFilter} eventType={EventType.Stream} label='Stream'></FilterLabel>\n          <FilterLabel filter={filter} setFilter={setFilter} eventType={EventType.Meetup} label='Meetup'></FilterLabel>\n        </EventKey>\n        {events ? (\n          <div>\n            {events.map((e, ei) => (\n              <Event key={ei} event={e} />\n            ))}\n          </div>\n        ) : (\n          <div>\n            loading...\n          </div>\n        )}\n      </Body>\n    </Column>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './comp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}